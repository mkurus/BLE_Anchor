prop use_aux=0x25,int_vector_base
prop use_aux=0x02,lp_start
prop use_aux=0x03,lp_end

#
# Macros
#
variable UPLOAD_ERROR :int =0
variable RETURN_VALUE :int =0

cond_macro em_error
    print ============================================================
    print =
    print =
    print =
    print = $*
    print =
    print =
    print =
    print ============================================================

    evalq UPLOAD_ERROR=1
endm

cond_macro em_reset
    delete break all
    evalq int_vector_base=0
    evalq pc=*((int*)0)
    evalq jlibase=JLI_table
    evalq lp_start=0
    evalq lp_end=0
    evalq LPC=0
    evalq stat32=0x1
endm

cond_macro em_push reg
    evalq sp = sp - 4
    evalq *sp = $reg
endm

cond_macro em_pop reg
    evalq $reg = *sp
    evalq sp = sp + 4
endm

cond_macro em_save_context
    em_push stat32
    em_push pc
    em_push blink
    em_push r13
    em_push r12
    em_push r11
    em_push r10
    em_push r9
    em_push r8
    em_push r7
    em_push r6
    em_push r5
    em_push r4
    em_push r3
    em_push r2
    em_push r1
    em_push r0
    em_push lp_end
    em_push lp_start
    em_push LPC
endm

cond_macro em_restore_context
    em_pop LPC
    em_pop lp_start
    em_pop lp_end
    em_pop r0
    em_pop r1
    em_pop r2
    em_pop r3
    em_pop r4
    em_pop r5
    em_pop r6
    em_pop r7
    em_pop r8
    em_pop r9
    em_pop r10
    em_pop r11
    em_pop r12
    em_pop r13
    em_pop blink
    em_pop pc
    em_pop stat32
endm

cond_macro em_call func
    print Calling function $func
    em_save_context
    evalq blink = pc
    break pc, hard, temp
    evalq pc = $func
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call1 func arg1
    print Calling function $func
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    break pc, hard, temp
    evalq pc = $func
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call2 func arg1 arg2
    print Calling function $func
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    evalq r1 = $arg2
    break pc, hard, temp
    evalq pc = $func
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call3 func arg1 arg2 arg3
    print Calling function $func
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    evalq r1 = $arg2
    evalq r2 = $arg3
    break pc, hard, temp
    evalq pc = $func
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call4 func arg1 arg2 arg3 arg4
    print Calling function $func
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    evalq r1 = $arg2
    evalq r2 = $arg3
    evalq r3 = $arg4
    break pc, hard, temp
    evalq pc = $func
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call_jli index
    print Calling JLI index $index
    em_save_context
    evalq blink = pc
    break pc, hard, temp
    evalq pc = &((int*)jlibase)[$index]
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call_jli1 index arg1
    print Calling JLI index $index
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    break pc, hard, temp
    evalq pc = &((int*)jlibase)[$index]
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call_jli2 index arg1 arg2
    print Calling JLI index $index
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    evalq r1 = $arg2
    break pc, hard, temp
    evalq pc = &((int*)jlibase)[$index]
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call_jli3 index arg1 arg2 arg3
    print Calling JLI index $index
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    evalq r1 = $arg2
    evalq r2 = $arg3
    break pc, hard, temp
    evalq pc = &((int*)jlibase)[$index]
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_call_jli4 index arg1 arg2 arg3 arg4
    print Calling JLI index $index
    em_save_context
    evalq blink = pc
    evalq r0 = $arg1
    evalq r1 = $arg2
    evalq r2 = $arg3
    evalq r3 = $arg4
    break pc, hard, temp
    evalq pc = &((int*)jlibase)[$index]
    continue
    evalq RETURN_VALUE = r0
    em_restore_context
endm

cond_macro em_upload file_emp file_elf
    system ..\..\cmake\bin\mdbgen.exe "$file_elf" "$file_emp" patch.txt 0 0
    read patch.txt
    system del patch.txt
    system del patch.bin
endm

# Restart the part and let it enter the idle function.
em_reset
break PML_GetVendorSleepRequest, hard, temp
continue

# Turn IRAM1 off.
em_call2 PML_EnableVddDomain 0x200 0

# Turn IRAM1 on.
em_call2 PML_EnableVddDomain 0x200 1

# Read numberOfContainers to find the index for the containerFlags.
variable NUMBER_OF_CONTAINERS :int=*((unsigned char*)0x8002bc)

# Upload the patch.
em_upload "beacon.emp" "beacon_debug.elf"

if (0 == UPLOAD_ERROR) then
    # Right before Patch_AppliedHook so we can scan for and apply IRAM patches.
    em_reset
    break 0x7df6, hard, temp
    continue

    # pmlFlg |= PML_SW_RST_FLG(TRUE);
    evalq r1 = r1 | 0x04

    # Let it enter the idle or entry function.
    system ..\..\cmake\bin\mdbgen.exe "beacon_debug.elf" break.txt $CODE_ADDRESS
    read break.txt
    system del break.txt
endif

variable PATCH_SCAN_STATE :int=*((unsigned int*)0x8002d4)
variable CONTAINER_FLAGS :int=*((unsigned char*)(0x805684 + NUMBER_OF_CONTAINERS))

if (0 == UPLOAD_ERROR) then
    if (0 == (PATCH_SCAN_STATE & 0x00000200)) then
        em_error No IRAM1 code patch was loaded.
    endif

    if (0 == (CONTAINER_FLAGS & 0x1)) then
        em_error Application patch was not applied.
    endif

    if (0 != (CONTAINER_FLAGS & 0x2)) then
        em_error Application failed to allocate RAM.
    endif

    if (0 != (CONTAINER_FLAGS & 0x4)) then
        print Application allocated RAM at an unexpected location.
    endif
endif

if (0 == UPLOAD_ERROR) then
    del b all

    print ============================================================
    print =
    print =
    print =
    print = Debugger Ready
    print =
    print =
    print =
    print ============================================================
endif
